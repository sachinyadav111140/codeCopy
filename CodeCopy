import java.io.FileWriter;
import java.io.IOException;
import java.lang.reflect.Field;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
import java.util.stream.Collectors;

public class CsvWriterUtil {

    public static <T> void writeToCsv(String filePath, List<T> data) throws IOException {
        if (data == null || data.isEmpty()) {
            throw new IllegalArgumentException("Data list is empty");
        }

        Class<?> clazz = data.get(0).getClass();
        Field[] fields = clazz.getDeclaredFields();

        // Filter fields annotated with @ExcelColumn and sort by order
        List<Field> sortedFields = Arrays.stream(fields)
                .filter(field -> field.isAnnotationPresent(ExcelColumn.class))
                .sorted(Comparator.comparingInt(field -> field.getAnnotation(ExcelColumn.class).order()))
                .collect(Collectors.toList());

        try (FileWriter writer = new FileWriter(filePath)) {
            // Write CSV header
            String header = sortedFields.stream()
                    .map(field -> field.getAnnotation(ExcelColumn.class).name())
                    .collect(Collectors.joining(","));
            writer.append(header).append("\n");

            // Write data rows
            for (T obj : data) {
                String row = sortedFields.stream().map(field -> {
                    field.setAccessible(true);
                    try {
                        return String.valueOf(field.get(obj));
                    } catch (IllegalAccessException e) {
                        throw new RuntimeException("Error accessing field value", e);
                    }
                }).collect(Collectors.joining(","));
                writer.append(row).append("\n");
            }
        }
    }
}
