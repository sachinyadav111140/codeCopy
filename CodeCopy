import com.example.filevalidation.model.FileValidationResponse;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.multipart.MultipartFile;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;ÃŸ
import java.util.Base64;

@Service
public class FileValidationService {

    private final RestTemplate restTemplate;
    private final ObjectMapper objectMapper;  // For JSON mapping
    private static final String SERVER_URL = "https://replace_server_name_variable/REPLACE_BASEPATH_VARIABLE/v2/fastmap/validate?file_name=";

    public FileValidationService(RestTemplate restTemplate, ObjectMapper objectMapper) {
        this.restTemplate = restTemplate;
        this.objectMapper = objectMapper;
    }

    public FileValidationResponse validateFile(MultipartFile file) {
        if (file.isEmpty()) {
            throw new RuntimeException("File is empty. Please upload a valid file.");
        }

        String url = SERVER_URL + file.getOriginalFilename();

        HttpHeaders headers = new HttpHeaders();
        headers.set("Authorization", "Basic " + Base64.getEncoder().encodeToString("REPLACE_BASIC_AUTH".getBytes()));
        headers.setContentType(MediaType.APPLICATION_OCTET_STREAM);
        headers.setAccept(MediaType.parseMediaTypes("application/json"));
import com.example.filevalidation.model.FileValidationResponse;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.multipart.MultipartFile;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.util.Base64;

@Service
public class FileValidationService {

    private final RestTemplate restTemplate;
    private final ObjectMapper objectMapper;  // For JSON mapping
    private static final String SERVER_URL = "https://replace_server_name_variable/REPLACE_BASEPATH_VARIABLE/v2/fastmap/validate?file_name=";

    public FileValidationService(RestTemplate restTemplate, ObjectMapper objectMapper) {
        this.restTemplate = restTemplate;
        this.objectMapper = objectMapper;
    }

    public FileValidationResponse validateFile(MultipartFile file) {
        if (file.isEmpty()) {
            throw new RuntimeException("File is empty. Please upload a valid file.");
        }

        String url = SERVER_URL + file.getOriginalFilename();

        HttpHeaders headers = new HttpHeaders();
        headers.set("Authorization", "Basic " + Base64.getEncoder().encodeToString("REPLACE_BASIC_AUTH".getBytes()));
        headers.setContentType(MediaType.APPLICATION_OCTET_STREAM);
        headers.setAccept(MediaType.parseMediaTypes("application/json"));

        HttpEntity<byte[]> requestEntity;
        try {
            requestEntity = new HttpEntity<>(file.getBytes(), headers);
        } catch (IOException e) {
            throw new RuntimeException("Error reading file: " + e.getMessage());
        }

        try {
            ResponseEntity<String> response = restTemplate.exchange(url, HttpMethod.POST, requestEntity, String.class);
            if (response.getStatusCode().is2xxSuccessful()) {
                return objectMapper.readValue(response.getBody(), FileValidationResponse.class);
            } else {
                throw new RuntimeException("Validation failed with response: " + response.getBody());
            }
        } catch (Exception e) {
            throw new RuntimeException("Error calling validation service: " + e.getMessage());
        }
    }
}
import com.example.filevalidation.model.FileValidationResponse;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.multipart.MultipartFile;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.util.Base64;

@Service
public class FileValidationService {

    private final RestTemplate restTemplate;
    private final ObjectMapper objectMapper;  // For JSON mapping
    private static final String SERVER_URL = "https://replace_server_name_variable/REPLACE_BASEPATH_VARIABLE/v2/fastmap/validate?file_name=";

    public FileValidationService(RestTemplate restTemplate, ObjectMapper objectMapper) {
        this.restTemplate = restTemplate;
        this.objectMapper = objectMapper;
    }

    public FileValidationResponse validateFile(MultipartFile file) {
        if (file.isEmpty()) {
            throw new RuntimeException("File is empty. Please upload a valid file.");
        }

        String url = SERVER_URL + file.getOriginalFilename();

        HttpHeaders headers = new HttpHeaders();
        headers.set("Authorization", "Basic " + Base64.getEncoder().encodeToString("REPLACE_BASIC_AUTH".getBytes()));
        headers.setContentType(MediaType.APPLICATION_OCTET_STREAM);
        headers.setAccept(MediaType.parseMediaTypes("application/json"));

        HttpEntity<byte[]> requestEntity;
        try {
            requestEntity = new HttpEntity<>(file.getBytes(), headers);
        } catch (IOException e) {
            throw new RuntimeException("Error reading file: " + e.getMessage());
        }

        try {
            ResponseEntity<String> response = restTemplate.exchange(url, HttpMethod.POST, requestEntity, String.class);
            if (response.getStatusCode().is2xxSuccessful()) {
                return objectMapper.readValue(response.getBody(), FileValidationResponse.class);
            } else {
                throw new RuntimeException("Validation failed with response: " + response.getBody());
            }
        } catch (Exception e) {
            throw new RuntimeException("Error calling validation service: " + e.getMessage());
        }
    }
}
import com.example.filevalidation.model.FileValidationResponse;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.multipart.MultipartFile;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.util.Base64;

@Service
public class FileValidationService {

    private final RestTemplate restTemplate;
    private final ObjectMapper objectMapper;  // For JSON mapping
    private static final String SERVER_URL = "https://replace_server_name_variable/REPLACE_BASEPATH_VARIABLE/v2/fastmap/validate?file_name=";

    public FileValidationService(RestTemplate restTemplate, ObjectMapper objectMapper) {
        this.restTemplate = restTemplate;
        this.objectMapper = objectMapper;
    }

    public FileValidationResponse validateFile(MultipartFile file) {
        if (file.isEmpty()) {
            throw new RuntimeException("File is empty. Please upload a valid file.");
        }

        String url = SERVER_URL + file.getOriginalFilename();

        HttpHeaders headers = new HttpHeaders();
        headers.set("Authorization", "Basic " + Base64.getEncoder().encodeToString("REPLACE_BASIC_AUTH".getBytes()));
        headers.setContentType(MediaType.APPLICATION_OCTET_STREAM);
        headers.setAccept(MediaType.parseMediaTypes("application/json"));

        HttpEntity<byte[]> requestEntity;
        try {
            requestEntity = new HttpEntity<>(file.getBytes(), headers);
        } catch (IOException e) {
            throw new RuntimeException("Error reading file: " + e.getMessage());
        }
DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyyMMdd'T'HHmmssZ");

        try {
            ResponseEntity<String> response = restTemplate.exchange(url, HttpMethod.POST, requestEntity, String.class);
            if (response.getStatusCode().is2xxSuccessful()) {
                return objectMapper.readValue(response.getBody(), FileValidationResponse.class);
            } else {
                throw new RuntimeException("Validation failed with response: " + response.getBody());
            }
        } catch (Exception e) {
            throw new RuntimeException("Error calling validation service: " + e.getMessage());
        }
    }
}

        HttpEntity<byte[]> requestEntity;
        try {
            requestEntity = new HttpEntity<>(file.getBytes(), headers);
        } catch (IOException e) {
            throw new RuntimeException("Error reading file: " + e.getMessage());
        }

        try {
            ResponseEntity<String> response = restTemplate.exchange(url, HttpMethod.POST, requestEntity, String.class);
            if (response.getStatusCode().is2xxSuccessful()) {
                return objectMapper.readValue(response.getBody(), FileValidationResponse.class);
            } else {
                throw new RuntimeException("Validation failed with response: " + response.getBody());
            }
        } catch (Exception e) {
            throw new RuntimeException("Error calling validation service: " + e.getMessage());
        }
    }
}
